package com.whj.tbspreview;import android.app.Activity;import android.content.Context;import android.content.Intent;import android.content.pm.ActivityInfo;import android.util.Log;import com.tencent.smtt.export.external.TbsCoreSettings;import com.tencent.smtt.sdk.QbSdk;import com.tencent.smtt.sdk.TbsListener;import com.whj.tbspreview.utils.OpenFileUtils;import java.io.File;import java.lang.ref.WeakReference;import java.util.HashMap;/** * author : William * github : WHuaJian * date   : 2021/1/1210:30 * desc   : */public class K12DocPreview {    /**     * 初始化TBS服务     */    public static void init(Context context) {        QbSdk.setDownloadWithoutWifi(true);        QbSdk.setTbsListener(                new TbsListener() {                    @Override                    public void onDownloadFinish(int i) {                        Log.d("QbSdk", "onDownloadFinish -->下载X5内核完成：" + i);                    }                    @Override                    public void onInstallFinish(int i) {                        Log.d("QbSdk", "onInstallFinish -->安装X5内核进度：" + i);                    }                    @Override                    public void onDownloadProgress(int i) {                        Log.d("QbSdk", "onDownloadProgress -->下载X5内核进度：" + i);                    }                });        QbSdk.PreInitCallback cb =                new QbSdk.PreInitCallback() {                    @Override                    public void onViewInitFinished(boolean arg0) {                        // x5內核初始化完成的回调，true表x5内核加载成功，否则表加载失败，会自动切换到系统内核。                        Log.d("QbSdk", " 内核加载 " + arg0);                        isInitX5 = arg0;                    }                    @Override                    public void onCoreInitFinished() {                    }                };        // x5内核初始化接口        QbSdk.initX5Environment(context, cb);        // 在调用TBS初始化、创建WebView之前进行如下配置        HashMap map = new HashMap();        map.put(TbsCoreSettings.TBS_SETTINGS_USE_SPEEDY_CLASSLOADER, true);        map.put(TbsCoreSettings.TBS_SETTINGS_USE_DEXLOADER_SERVICE, true);        QbSdk.initTbsSettings(map);    }    public static boolean isInitX5;    public static final String KEY_DOC_PATH = "KEY_PREVIEW_PATH";    public static final String KEY_DOC_TITLE = "KEY_PLAY_TITLE";    public static final String KEY_PLAY_SCREEN = "KEY_PLAY_SCREEN";    private WeakReference<Activity> activity;    private String path;    private String title;    protected K12DocPreview() {    }    public static Builder builder(Activity activity) {        return new Builder(activity);    }    public static class Builder {        private K12DocPreview picker = new K12DocPreview();        private Builder(Activity activity) {            picker.activity = new WeakReference<>(activity);        }        public Builder setPath(String path) {            picker.path = path;            return this;        }        public Builder setTitle(String title) {            picker.title = title;            return this;        }        /**         * 横屏应用预览         */        public void previewForLandscape() {            play(ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE);        }        /**         * 竖屏应用预览         */        public void previewForPortrait() {            play(ActivityInfo.SCREEN_ORIENTATION_SENSOR_PORTRAIT);        }        private void play(int activityInfo) {            if (isInitX5) {                Intent intent = new Intent(picker.activity.get(), DocPreviewActivity.class);                intent.putExtra(KEY_DOC_PATH, picker.path);                intent.putExtra(KEY_DOC_TITLE, picker.title);                intent.putExtra(KEY_PLAY_SCREEN, activityInfo);                picker.activity.get().startActivity(intent);            } else {                OpenFileUtils.openFile(picker.activity.get(), new File(picker.path));            }        }    }}